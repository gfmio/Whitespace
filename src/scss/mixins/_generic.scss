// 
// Generic mixins and styles
// 

@function color($name) {
	$allColors: join($colors, $grayscales);
	@return getDictItem($name, $allColors);
}

@function font($name) {
	@return getDictItem($name, $fonts);
}

@function padding($name) {
	@return rem($base-line-height) * 
		strip-units(rem(getDictItem($name, $paddings)));
}

@function margin($name) {
	@return rem($base-line-height) * 
		strip-units(rem(getDictItem($name, $margins)));
}

@function rule-width($name) {
	@return rem($base-line-height) * 
		strip-units(rem(getDictItem($name, $rule-widths)));
}

@function border-radius($name) {
	@return rem($base-line-height) * 
		strip-units(rem(getDictItem($name, $border-radii)));
}

@function font-weight($name) {
	@return getDictItem($name, $font-weights);
}

@function font-size($name) {
	@return 1.0rem * getDictItem($name, $font-sizes);
}

// Color contrasting based on http://codepen.io/lunelson/pen/jENxwB

// LINEAR to LOGARITHMIC and vicev-ersa
@function lin2log($n) { @if $n <= 0.0031308 { @return $n * 12.92; } @else { @return 1.055 * pow($n,1/2.4) - 0.055; } }
@function log2lin($n) { @if $n <= 0.04045 { @return $n / 12.92; } @else { @return pow((($n + 0.055)/1.055),2.4); } }

// sRGB BT-709 BRIGHTNESS
@function brightness($c) {
	$rlin: log2lin(red($c)/255);
	$glin: log2lin(green($c)/255);
	$blin: log2lin(blue($c)/255);
	@return lin2log(0.2126 * $rlin + 0.7152 * $glin + 0.0722 * $blin) * 100;
}

// Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
@function text-color($color) {
  $light: color("light");
  $dark: color("dark");

  @if $color == null {
    @return null;
  } @else {
    $color-brightness: brightness($color);  
    $light-text-brightness: brightness($light);
    $dark-text-brightness: brightness($dark);

    @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);  
  }
}
