//
// Generic styles
//

@if elementIsIncluded("generic") {
	// 
	// Generic element styles
	// 

	* {
		box-sizing: border-box;
		-webkit-font-smoothing: antialiased;
		text-rendering: geometricPrecision;
		-moz-osx-font-smoothing: grayscale;

		white-space: normal;
	    word-wrap: break-word; 
	}

	html {
		font-size: $base-font-size;
		line-height: $base-line-height;
	}

	@media (min-width: $max-window-em-width) {
		html {
			font-size: 100.0 / strip-units($max-window-em-width) * 1.0vw;
		}
	}

	//
	// Colors
	//

	$allColors: join($colors, $grayscales);
	@each $color in $allColors {
		$length: length($color);
		$value: nth($color, $length);

		@for $n from 1 to $length {
			$name: nth($color, $n);
			
			// Background colors

			.bg-#{$name} {
				background-color: $value;
				color: text-color($value);
			}

			// Text colors

			.text-#{$name} {
				color: $value;
			}

			// Border colors

			.border-#{$name}, hr.#{$name} {
				border-color: $value;
				border-style: solid;
			}

			@each $direction in $directions {
				.border-#{$direction}-#{$name} {
					border-#{$direction}-color: $value;
					border-#{$direction}-style: solid;
				}
			}
		}
	}

	// 
	// Fonts
	// 

	@each $font in $fonts {
		$length: length($font);
		$value: nth($font, $length);

		@for $n from 1 to $length {
			$name: nth($font, $n);  
			$propertyCount: length($value);
			
			.font-#{$name} {
				@for $n from 1 to $propertyCount + 1 {
					$property: nth(nth($value, $n), 1);
					$propertyValue: nth(nth($value, $n), 2);

					#{$property}: #{$propertyValue};
				}
			}
		}
	}

	//
	// Distances
	//

	// Border and rule widths

	@each $rule-width in $rule-widths {
		$length: length($rule-width);
		$value: nth($rule-width, $length);

		@for $n from 1 to $length {
			$name: nth($rule-width, $n);

			hr.#{$name} {
				border-top-width: rule-width($name);
				border-left: 0;
				border-right: 0;
				border-bottom: 0;
			}

			.border-#{$name} {
				border-width: rule-width($name);
			}

			@each $direction in $directions {
				.border-#{$direction}-#{$name} {
					border-#{$direction}-width: rule-width($name);
				}
			}
		}
	}

	// Paddings

	@each $padding in $paddings {
		$length: length($padding);
		$value: nth($padding, $length);

		@for $n from 1 to $length {
			$name: nth($padding, $n);

			.padding-#{$name} {
				& {
					padding: padding($name);
				}
			}

			@each $direction in $directions {
				.padding-#{$direction}-#{$name} {
					& {
						padding-#{$direction}: padding($name);
					}
				}
			}
		}
	}

	// Margins

	@each $margin in $margins {
		$length: length($margin);
		$value: nth($margin, $length);

		@for $n from 1 to $length {
			$name: nth($margin, $n);

			.margin-#{$name} {
				& {
					margin: margin($name);
				}

				@each $rule-width in $rule-widths {
					$rLen: length($rule-width);

					@for $n from 1 to $rLen {
						$rule-width-name: nth($rule-width, $n);

						&.border-#{$rule-width-name} {
							margin: margin($name) - rule-width($rule-width-name);
						}

						@each $direction in $directions {
							&.border-#{$direction}-#{$name} {
								margin-#{$direction}: margin($name) - rule-width($rule-width-name);
							}
						}
					}
				}
			}

			@each $direction in $directions {
				.margin-#{$direction}-#{$name} {
					& {
						margin-#{$direction}: margin($name);
					}

					@each $rule-width in $rule-widths {
						$rLen: length($rule-width);

						@for $n from 1 to $rLen {
							$rule-width-name: nth($rule-width, $n);

							&.border-#{$direction}-#{$name} {
								margin-#{$direction}: margin($name) - rule-width($rule-width-name);
							}
						}
					}
				}
			}

			.margin-negative-#{$name} {
				& {
					margin: -1.0 * margin($name);
				}

				@each $rule-width in $rule-widths {
					$rLen: length($rule-width);

					@for $n from 1 to $rLen {
						$rule-width-name: nth($rule-width, $n);

						&.border-#{$rule-width-name} {
							margin: -1.0 * margin($name) - rule-width($rule-width-name);
						}

						@each $direction in $directions {
							&.border-#{$direction}-#{$name} {
								margin-#{$direction}: -1.0 * margin($name) - rule-width($rule-width-name);
							}
						}
					}
				}
			}

			@each $direction in $directions {
				.margin-negative-#{$direction}-#{$name} {
					& {
						margin-#{$direction}: -1.0 * margin($name);
					}

					@each $rule-width in $rule-widths {
						$rLen: length($rule-width);

						@for $n from 1 to $rLen {
							$rule-width-name: nth($rule-width, $n);

							&.border-#{$direction}-#{$name} {
								margin-#{$direction}: -1.0 * margin($name) - rule-width($rule-width-name);
							}
						}
					}
				}
			}
		}
	}

	// Border-radius

	@each $radius in $border-radii {
		$length: length($radius);
		$value: nth($radius, $length);

		@for $n from 1 to $length {
			$name: nth($radius, $n);

			.border-radius-#{$name} {
				& {
					border-radius: border-radius($name);
				}
			}

			@each $corner-direction in $corner-directions {
				.border-radius-#{$corner-direction}-#{$name} {
					& {
						border-#{$corner-direction}-radius: border-radius($name);
					}
				}
			}
		}
	}

	// Font styles

	@each $font-weight in $font-weights {
		$length: length($font-weight);
		$value: nth($font-weight, $length);

		@for $n from 1 to $length {
			$name: nth($font-weight, $n);

			.font-weight-#{$name} {
				font-weight: $value;
			}
		}
	}

	// 
	// Misc
	// 

	// Container sizing

	.full-width {
		width: 100%;
	}

	.full-height {
		height: 100%;
	}

	.screen-width {
		min-width: 100vw;
	}

	.screen-height {
		min-height: 100vh;
	}

	.frame {
		@extend .full-width;
		@extend .full-height;
		@extend .screen-width;
		@extend .screen-height;
	}

	// Display styles

	.block {
	  display: block !important;
	}

	.inline-block {
	  display: inline-block !important;
	}

	.inline {
	  display: inline !important;
	}

	.flex {
	  display: flex;
	}

	// Positioning

	.absolute {
		position: absolute;
	}

	.relative {
		position: relative;
	}

	.fixed {
		position: fixed;
	}

	.sticky {
		position: -webkit-sticky;
		position: sticky;

		&:before, &:after {
			content: '';
			display: table;
		}
	}

	// Vertical centering

	.vcenter-wrapper {
	  transform: translateY(50%);
	}

	.vcenter {
	  transform: translateY(-50%);
	}

	// Alignment

	.left {
		float: left;
	}

	.right {
		float: right;
	}

	.center {
		float: none;
		margin-left: auto;
		margin-right: auto;
	}

	// Clearfix

	.clearfix {
		@include clearfix;
	}

	// Content overflow

	.overflow-visible {
		overflow: visible;
	}

	.overflow-visible-x {
		overflow-x: visible;
	}

	.overflow-visible-y {
		overflow-y: visible;
	}

	.overflow-hidden {
		overflow: hidden;
	}

	.overflow-hidden-x {
		overflow-x: hidden;
	}

	.overflow-hidden-y {
		overflow-y: hidden;
	}

	.overflow-scroll {
		overflow: scroll;
	}

	.overflow-scroll-x {
		overflow-x: scroll;
	}

	.overflow-scroll-y {
		overflow-y: scroll;
	}

	// Aspect ratio

	.square, .ratio1_1, .ratio2_1, .ratio1_2, .ratio4_3, .ratio16_9 {
		position: relative;
	}

	.square:before, .ratio1_1:before, .ratio2_1:before, .ratio1_2:before, .ratio4_3:before, .ratio16_9:before {
		content: "";
		display: block;
	}

	.square:before, .ratio1_1:before {
		padding-top: 100%;
	}

	.ratio2_1:before{
		padding-top: 50%;
	}

	.ratio1_2:before{
		padding-top: 200%;
	}

	.ratio4_3:before{
		padding-top: 75%;
	}

	.ratio16_9:before{
		padding-top: 56.25%;
	}
}
